/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __lcmKeyFrame_lcmKeyFrameInfo_hpp__
#define __lcmKeyFrame_lcmKeyFrameInfo_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>
#include "lcmKeyFrame/lcmKeyPoint.hpp"
#include "lcmKeyFrame/lcmKeyPoint.hpp"
#include "lcmKeyFrame/lcmBowVector.hpp"
#include "lcmKeyFrame/lcmFeatureVector.hpp"
#include "lcmKeyFrame/lcmKeyFrameMapPoints.hpp"

namespace lcmKeyFrame
{

class lcmKeyFrameInfo
{
    public:
        int64_t    nNextId;

        int64_t    mnId;

        int64_t    mnFrameId;

        double     mTimeStamp;

        int64_t    mnGridCols;

        int64_t    mnGridRows;

        float      mfGridElementWidthInv;

        float      mfGridElementHeightInv;

        int64_t    mnTrackReferenceForFrame;

        int64_t    mnFuseTargetForKF;

        int64_t    mnBALocalForKF;

        int64_t    mnBAFixedForKF;

        int64_t    mnLoopQuery;

        int64_t    mnLoopWords;

        float      mLoopScore;

        int64_t    mnRelocQuery;

        int64_t    mnRelocWords;

        float      mRelocScore;

        float      mTcwGBA[4][4];

        float      mTcwBefGBA[4][4];

        int64_t    mnBAGlobalForKF;

        float      fx;

        float      fy;

        float      cx;

        float      cy;

        float      invfx;

        float      invfy;

        float      mbf;

        float      mb;

        float      mThDepth;

        int64_t    N;

        int64_t    num_mvKeys;

        std::vector< lcmKeyFrame::lcmKeyPoint > mvKeys;

        int64_t    num_mvKeysUn;

        std::vector< lcmKeyFrame::lcmKeyPoint > mvKeysUn;

        int64_t    num_mvuRight;

        std::vector< float > mvuRight;

        int64_t    num_mvDepth;

        std::vector< float > mvDepth;

        int64_t    num_rows;

        int64_t    num_cols;

        std::vector< std::vector< float > > mDescriptors;

        int64_t    num_BowVector;

        std::vector< lcmKeyFrame::lcmBowVector > BowVector;

        int64_t    num_FeatureVector;

        std::vector< lcmKeyFrame::lcmFeatureVector > FeatureVector;

        float      mTcp[4][4];

        int64_t    mnScaleLevels;

        float      mfScaleFactor;

        float      mfLogScaleFactor;

        int64_t    num_mvScaleFactors;

        std::vector< float > mvScaleFactors;

        int64_t    num_mvLevelSigma2;

        std::vector< float > mvLevelSigma2;

        int64_t    num_mvInvLevelSigma2;

        std::vector< float > mvInvLevelSigma2;

        int64_t    mnMinX;

        int64_t    mnMinY;

        int64_t    mnMaxX;

        int64_t    mnMaxY;

        float      mK[3][3];

        float      mTcw[4][4];

        int64_t    num_mvpMapPoints;

        std::vector< lcmKeyFrame::lcmKeyFrameMapPoints > mvpMapPoints;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "lcmKeyFrameInfo"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmKeyFrameInfo::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmKeyFrameInfo::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmKeyFrameInfo::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmKeyFrameInfo::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* lcmKeyFrameInfo::getTypeName()
{
    return "lcmKeyFrameInfo";
}

int lcmKeyFrameInfo::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->nNextId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnFrameId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->mTimeStamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnGridCols, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnGridRows, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mfGridElementWidthInv, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mfGridElementHeightInv, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnTrackReferenceForFrame, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnFuseTargetForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnBALocalForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnBAFixedForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnLoopQuery, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnLoopWords, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mLoopScore, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnRelocQuery, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnRelocWords, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mRelocScore, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mTcwGBA[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mTcwBefGBA[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnBAGlobalForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fx, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fy, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->cx, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->cy, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->invfx, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->invfy, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mbf, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mb, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mThDepth, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->N, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvKeys, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_mvKeys; a0++) {
        tlen = this->mvKeys[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvKeysUn, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_mvKeysUn; a0++) {
        tlen = this->mvKeysUn[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvuRight, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvuRight > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mvuRight[0], this->num_mvuRight);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvDepth, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvDepth > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mvDepth[0], this->num_mvDepth);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_rows, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_cols, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_cols > 0) {
        for (int a0 = 0; a0 < this->num_rows; a0++) {
            tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mDescriptors[a0][0], this->num_cols);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_BowVector, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_BowVector; a0++) {
        tlen = this->BowVector[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_FeatureVector, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_FeatureVector; a0++) {
        tlen = this->FeatureVector[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mTcp[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnScaleLevels, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mfScaleFactor, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mfLogScaleFactor, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvScaleFactors, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvScaleFactors > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mvScaleFactors[0], this->num_mvScaleFactors);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvLevelSigma2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvLevelSigma2 > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mvLevelSigma2[0], this->num_mvLevelSigma2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvInvLevelSigma2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvInvLevelSigma2 > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mvInvLevelSigma2[0], this->num_mvInvLevelSigma2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnMinX, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnMinY, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnMaxX, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->mnMaxY, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 3; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mK[a0][0], 3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->mTcw[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_mvpMapPoints, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_mvpMapPoints; a0++) {
        tlen = this->mvpMapPoints[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmKeyFrameInfo::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->nNextId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnFrameId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->mTimeStamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnGridCols, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnGridRows, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mfGridElementWidthInv, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mfGridElementHeightInv, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnTrackReferenceForFrame, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnFuseTargetForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnBALocalForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnBAFixedForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnLoopQuery, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnLoopWords, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mLoopScore, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnRelocQuery, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnRelocWords, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mRelocScore, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mTcwGBA[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mTcwBefGBA[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnBAGlobalForKF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fx, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fy, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->cx, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->cy, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->invfx, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->invfy, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mbf, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mb, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mThDepth, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->N, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvKeys, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->mvKeys.resize(this->num_mvKeys);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_mvKeys; a0++) {
        tlen = this->mvKeys[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvKeysUn, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->mvKeysUn.resize(this->num_mvKeysUn);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_mvKeysUn; a0++) {
        tlen = this->mvKeysUn[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvuRight, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvuRight) {
        this->mvuRight.resize(this->num_mvuRight);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mvuRight[0], this->num_mvuRight);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvDepth, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvDepth) {
        this->mvDepth.resize(this->num_mvDepth);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mvDepth[0], this->num_mvDepth);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_rows, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_cols, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->mDescriptors.resize(this->num_rows);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_rows; a0++) {
        if(this->num_cols) {
            this->mDescriptors[a0].resize(this->num_cols);
            tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mDescriptors[a0][0], this->num_cols);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_BowVector, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->BowVector.resize(this->num_BowVector);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_BowVector; a0++) {
        tlen = this->BowVector[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_FeatureVector, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->FeatureVector.resize(this->num_FeatureVector);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_FeatureVector; a0++) {
        tlen = this->FeatureVector[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mTcp[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnScaleLevels, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mfScaleFactor, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mfLogScaleFactor, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvScaleFactors, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvScaleFactors) {
        this->mvScaleFactors.resize(this->num_mvScaleFactors);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mvScaleFactors[0], this->num_mvScaleFactors);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvLevelSigma2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvLevelSigma2) {
        this->mvLevelSigma2.resize(this->num_mvLevelSigma2);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mvLevelSigma2[0], this->num_mvLevelSigma2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvInvLevelSigma2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_mvInvLevelSigma2) {
        this->mvInvLevelSigma2.resize(this->num_mvInvLevelSigma2);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mvInvLevelSigma2[0], this->num_mvInvLevelSigma2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnMinX, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnMinY, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnMaxX, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->mnMaxY, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 3; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mK[a0][0], 3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->mTcw[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_mvpMapPoints, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->mvpMapPoints.resize(this->num_mvpMapPoints);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_mvpMapPoints; a0++) {
        tlen = this->mvpMapPoints[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmKeyFrameInfo::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_mvKeys; a0++) {
        enc_size += this->mvKeys[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_mvKeysUn; a0++) {
        enc_size += this->mvKeysUn[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->num_mvuRight);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->num_mvDepth);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += this->num_rows * __float_encoded_array_size(NULL, this->num_cols);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_BowVector; a0++) {
        enc_size += this->BowVector[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_FeatureVector; a0++) {
        enc_size += this->FeatureVector[a0]._getEncodedSizeNoHash();
    }
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->num_mvScaleFactors);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->num_mvLevelSigma2);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->num_mvInvLevelSigma2);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += 3 * __float_encoded_array_size(NULL, 3);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_mvpMapPoints; a0++) {
        enc_size += this->mvpMapPoints[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t lcmKeyFrameInfo::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == lcmKeyFrameInfo::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, lcmKeyFrameInfo::getHash };

    uint64_t hash = 0x214aaba65486daa0LL +
         lcmKeyFrame::lcmKeyPoint::_computeHash(&cp) +
         lcmKeyFrame::lcmKeyPoint::_computeHash(&cp) +
         lcmKeyFrame::lcmBowVector::_computeHash(&cp) +
         lcmKeyFrame::lcmFeatureVector::_computeHash(&cp) +
         lcmKeyFrame::lcmKeyFrameMapPoints::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
